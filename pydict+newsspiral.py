# -*- coding: utf-8 -*-
"""PyDict+NewsSpiral.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbUVXzRoBpkhv0b-weClc2XqnyFzCS3m
"""

from sklearn import cluster, datasets
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import csv
from sklearn.model_selection import train_test_split
import random

datar = pd.read_csv('https://raw.githubusercontent.com/Jacobikinz/Project-Hummingbird/master/CSV%20Apple%20%2B%20News%20(RAW).csv', dtype=str,delimiter=',', skiprows=0)
#print (data)

news = (datar.loc[:,'News'])
print (news[30])


hi = "what's up"
print (len(hi))
print (hi + "", 'hi')

print (len(news[30]))

redditnews = pd.read_csv('https://raw.githubusercontent.com/Jacobikinz/Project-Hummingbird/master/RedditNews_serialnum.csv', dtype=str,delimiter=',', skiprows=0)


grouped = redditnews.groupby('Date')
list(grouped)
grouped.sum().reset_index().to_csv('weeker_grouped.csv')

#grouped.to_csv(index=False)
#gr = grouped.agg(np.add)
#list(gr)

data = pd.read_csv('https://raw.githubusercontent.com/Jacobikinz/Project-Hummingbird/master/CSV_Apple_News_Dates_messed_up.csv', dtype=str,delimiter=',', skiprows=0)
print (data)

lenny = (data.loc[:,'Unnamed: 9'])
print (lenny)

opener = (data.loc[:,'open'])
dater = (data.loc[:,'date'])

plt.plot(dater, opener)

#axes = plt.gca()
#axes.set_xlim([41313,41335])
#axes.set_ylim([60,75])

train, test = train_test_split(data, test_size=0.2)

#Training
train_close = (train.loc[:,'close'].values.reshape(-1, 1))
train_len = (train.loc[:,'Unnamed: 9'].values.reshape(-1, 1))
print (train.loc[:,'Unnamed: 9'].values)
#Test
test_close = (test.loc[:,'close'].values.reshape(-1, 1))
test_len = (test.loc[:,'Unnamed: 9'].values.reshape(-1, 1))

#---------
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
linregtest = LinearRegression(normalize=True)

linregtest.fit(train_len, train_close)
predicted_close = linregtest.predict(test_len)

#R SQUARED
rsq_score = r2_score(test_len, predicted_close) 
print ("r^2 for the model:", round(rsq_score,5))

"2.7.0_bf4fda703454".split("_")

lhs, rhs = "2.7.0_bf4fda703454".split("_", 1)

print(lhs)
print (rhs)

mystring = "What does the fox say?"
mylist = mystring.split(" ")
print (type(mylist))
print (mylist)

text = 'geeks for geeks'
  
# Splits at space 
print(text.split()) 
  
word = 'geeks, for, geeks'
  
# Splits at ',' 
print(word.split(', ')) 
  
word = 'geeks:for:geeks'
  
# Splitting at ':' 
print(word.split(':')) 
  
word = 'CatBatSatFatOr'
  
# Splitting at 3 
print([word[i:i+3] for i in range(0, len(word), 3)])

word = 'geeks, for, geeks, pawan'
  
# maxsplit: 0 
print(word.split(', ', 0)) 
  
# maxsplit: 4 
print(word.split(', ', 4)) 
  
# maxsplit: 1 
print(word.split(', ', 1))

"""https://pypi.org/project/parse/"""

pip install PyDictionary

from PyDictionary import PyDictionary

dictionary=PyDictionary()

print (dictionary.meaning("indentation"))
print (dictionary.synonym("Life"))
print (dictionary.antonym("Life"))